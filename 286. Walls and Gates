You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
==============================

  
```python
class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """  
    if len(rooms) == 0:
            return rooms
        
        m = len(rooms) 
        n = len(rooms[0])
        
        for i in range(m):
            for j in range(n):
                if rooms[i][j] == 2147483647:
                    if self.BFS(rooms, i, j, n, m) > 0:
                        rooms[i][j] = self.BFS(rooms, i, j,n,m)
                
                    
    def BFS(self,rooms,i,j, n, m):
        dist = 0
        cur_level = [(i,j)]
        queue = [cur_level]
        visited = []
        while queue:
            cur_level = queue.pop(0) # cur_level is a list containing nodes
            next_level = []
            for cur in cur_level: # iterate for the
                visited.append(cur)
                if 0<= cur[1] - 1 <= n -1:
                    if rooms[cur[0]][cur[1] - 1] == 0:
                        dist += 1
                        return dist 
                    elif rooms[cur[0]][cur[1] - 1] != -1 and (cur[0], cur[1] - 1) not in visited:
                        next_level.append((cur[0], cur[1] - 1))
                if 0<= cur[1] + 1 <= n -1:
                    if rooms[cur[0]][cur[1] + 1] == 0:
                        dist += 1
                        return dist
                    elif rooms[cur[0]][cur[1] + 1] != -1 and (cur[0], cur[1] + 1) not in visited:
                        next_level.append((cur[0],cur[1] + 1))
                if 0<= cur[0] -1 <= m -1:
                    if rooms[cur[0] -1][cur[1]] == 0:
                        dist += 1
                        return dist 
                    elif rooms[cur[0] -1][cur[1]] != -1 and (cur[0] - 1, cur[1]) not in visited:
                        next_level.append((cur[0] - 1, cur[1]))
                if 0<= cur[0]+1 <= m -1:
                    if rooms[cur[0]+1][cur[1]] == 0:
                        dist += 1
                        return dist
                    elif rooms[cur[0]+1][cur[1]] != -1 and (cur[0] + 1, cur[1]) not in visited:
                        next_level.append((cur[0] + 1, cur[1]))
            if len(next_level) > 0:
                dist += 1
                queue.append(next_level)
        return 0
 ```
