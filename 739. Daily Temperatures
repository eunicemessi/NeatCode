```python
class Solution(object):
    def dailyTemperatures(self, T: List[int]) -> List[int]:        
        res = [0] * len(T)
        stack = []
        
        for i in range(len(T) - 1, -1, -1):
            while stack and T[i] >= T[stack[-1]]:
                stack.pop()
            if stack:
                res[i] = stack[-1] - i
            stack.append(i)
        return res 
```
Big logical mistake, it's not just make k elements "evenly" lie around in the center target.

```python
class Solution(object):
    def searchFirstX(self, nums, target):
        l, r = 0, len(nums) - 1
        while l + 1 < r:
            mid = l + (r - l) // 2
            if nums[mid] == target and nums[mid - 1] != nums[mid]:
                return mid
            if nums[mid] >= target:
                r = mid
            else:
                l = mid
        # post-process, if not returned, then there will be 2 elements unsearched
        if abs(nums[l] - target) > abs(nums[r] - target):
            return r 
        else:
            return l 
    
    def findClosestElements(self, arr, k, x):
        """
        :type arr: List[int]
        :type k: int
        :type x: int
        :rtype: List[int]
        """
        if x < arr[0]:
            return arr[: k]
        if x > arr[len(arr) - 1]:
            return arr[-k:]
        
        # else x <= arr[0] <= arr[len(arr) - 1]
        idx_c = self.searchFirstX(arr, x)
        
        # 3, find the k elements
        q = (k-1) // 2
        L, R = idx_c, len(arr) - 1 - idx_c 
        if q < min(L,R):
            return arr[idx_c - q -1:idx_c - q -1 + k]
        else:
            return arr[:k] if L <= R else arr[-k:]
```
